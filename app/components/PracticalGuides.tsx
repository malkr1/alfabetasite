'use client'
import React, { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

export default function PracticalGuides() {
  const [expandedSections, setExpandedSections] = useState<string[]>([])

  const toggleSection = (section: string) => {
    setExpandedSections(prev => 
      prev.includes(section) 
        ? prev.filter(s => s !== section)
        : [...prev, section]
    )
  }

  const guides = {
    combinations: [
      {
        title: '–î–ª—è —Å–∏–ª–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        items: [
          '–ö—Ä–µ–∞—Ç–∏–Ω (5–≥) + –ö–æ—Ñ–µ–∏–Ω (200–º–≥) –∑–∞ 30-40 –º–∏–Ω—É—Ç –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          '–ü—Ä–æ—Ç–µ–∏–Ω (25-30–≥) + –ö—Ä–µ–∞—Ç–∏–Ω (5–≥) –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          'BCAA (5-10–≥) –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'
        ],
        icon: 'üí™'
      },
      {
        title: '–î–ª—è –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏—è',
        items: [
          'L-–∫–∞—Ä–Ω–∏—Ç–∏–Ω (2–≥) + –ö–æ—Ñ–µ–∏–Ω (200–º–≥) –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –∫–∞—Ä–¥–∏–æ',
          'BCAA (5-10–≥) –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞—Ç–æ—â–∞–∫',
          '–ü—Ä–æ—Ç–µ–∏–Ω (20-25–≥) –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'
        ],
        icon: 'üî•'
      },
      {
        title: '–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
        items: [
          '–ü—Ä–æ—Ç–µ–∏–Ω (30–≥) + –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          'BCAA (5–≥) + –ì–ª—é—Ç–∞–º–∏–Ω (5–≥) –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
          '–û–º–µ–≥–∞-3 (2-3–≥) —Å –ª—é–±—ã–º –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏'
        ],
        icon: 'üîÑ'
      }
    ],
    incompatible: [
      {
        combination: '–ö–æ—Ñ–µ–∏–Ω + –ü—Ä–µ–¥—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å',
        reason: '–†–∏—Å–∫ –ø–µ—Ä–µ—Å—Ç–∏–º—É–ª—è—Ü–∏–∏ –∏ —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏–∏',
        icon: '‚ö†Ô∏è'
      },
      {
        combination: '–ö—Ä–µ–∞—Ç–∏–Ω + –ö–æ—Ñ–µ–∏–Ω (–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)',
        reason: '–ö–æ—Ñ–µ–∏–Ω –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞—Ç—å —É—Å–≤–æ–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–Ω–∞',
        icon: '‚ö†Ô∏è'
      }
    ],
    myths: [
      {
        myth: 'BCAA —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–æ—Ç–µ–∏–Ω–∞',
        fact: '–ü—Ä–æ—Ç–µ–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã, –≤–∫–ª—é—á–∞—è BCAA',
        icon: 'ü§î'
      },
      {
        myth: '–ü—Ä–æ—Ç–µ–∏–Ω –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∞–±–æ—Ä—É –∂–∏—Ä–∞',
        fact: '–ò–∑–±—ã—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞–±–æ—Ä –≤–µ—Å–∞, –∞ –Ω–µ —Å–∞–º –ø—Ä–æ—Ç–µ–∏–Ω',
        icon: 'ü§î'
      },
      {
        myth: '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –ª–µ—Ç–æ–º',
        fact: '–û–Ω–∏ —Ç–µ—Ä—è—é—Ç—Å—è —Å –ø–æ—Ç–æ–º –ø—Ä–∏ –ª—é–±–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ',
        icon: 'ü§î'
      }
    ]
  }

  const sectionVariants = {
    hidden: { opacity: 0, height: 0 },
    visible: { 
      opacity: 1, 
      height: 'auto',
      transition: { duration: 0.5, ease: 'easeInOut' }
    }
  }

  const itemVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: { 
      opacity: 1, 
      x: 0,
      transition: { duration: 0.3 }
    }
  }

  return (
    <div className="space-y-8">
      {/* –ö–∞–∫ —Å–æ—á–µ—Ç–∞—Ç—å –¥–æ–±–∞–≤–∫–∏ */}
      <motion.div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 shadow-lg 
        border border-transparent hover:border-blue-200 dark:hover:border-blue-500/30 transition-all duration-300">
        <button
          onClick={() => toggleSection('combinations')}
          className="w-full text-left mb-4 flex items-center justify-between"
        >
          <h3 className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r 
            from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400">
            –ö–∞–∫ —Å–æ—á–µ—Ç–∞—Ç—å –¥–æ–±–∞–≤–∫–∏
          </h3>
          <span className="text-xl text-gray-800 dark:text-gray-200">
            {expandedSections.includes('combinations') ? '‚ñº' : '‚ñ∂'}
          </span>
        </button>
        <AnimatePresence>
          {expandedSections.includes('combinations') && (
            <motion.div
              variants={sectionVariants}
              initial="hidden"
              animate="visible"
              exit="hidden"
            >
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {guides.combinations.map((combo, index) => (
                  <motion.div
                    key={combo.title}
                    variants={itemVariants}
                    initial="hidden"
                    animate="visible"
                    transition={{ delay: index * 0.1 }}
                    className="bg-gradient-to-br from-blue-50/50 to-purple-50/50 
                      dark:from-blue-900/30 dark:to-purple-900/30 
                      rounded-lg p-4 border border-blue-100/50 dark:border-blue-500/20"
                  >
                    <div className="text-3xl mb-2">{combo.icon}</div>
                    <h4 className="font-semibold mb-2 text-gray-800 dark:text-gray-100">{combo.title}</h4>
                    <ul className="space-y-2">
                      {combo.items.map((item, i) => (
                        <li key={i} className="text-gray-600 dark:text-gray-300 flex items-start">
                          <span className="mr-2">‚Ä¢</span>
                          {item}
                        </li>
                      ))}
                    </ul>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>

      {/* –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ */}
      <motion.div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 shadow-lg 
        border border-transparent hover:border-red-200 dark:hover:border-red-500/30 transition-all duration-300">
        <button
          onClick={() => toggleSection('incompatible')}
          className="w-full text-left mb-4 flex items-center justify-between"
        >
          <h3 className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r 
            from-red-600 to-orange-600 dark:from-red-400 dark:to-orange-400">
            –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
          </h3>
          <span className="text-xl text-gray-800 dark:text-gray-200">
            {expandedSections.includes('incompatible') ? '‚ñº' : '‚ñ∂'}
          </span>
        </button>
        <AnimatePresence>
          {expandedSections.includes('incompatible') && (
            <motion.div
              variants={sectionVariants}
              initial="hidden"
              animate="visible"
              exit="hidden"
            >
              <div className="space-y-4">
                {guides.incompatible.map((item, index) => (
                  <motion.div
                    key={item.combination}
                    variants={itemVariants}
                    initial="hidden"
                    animate="visible"
                    transition={{ delay: index * 0.1 }}
                    className="bg-gradient-to-br from-red-50/50 to-orange-50/50 
                      dark:from-red-900/30 dark:to-orange-900/30 
                      rounded-lg p-4 border border-red-100/50 dark:border-red-500/20"
                  >
                    <div className="flex items-start">
                      <span className="text-2xl mr-3">{item.icon}</span>
                      <div>
                        <h4 className="font-semibold text-gray-800 dark:text-gray-100">{item.combination}</h4>
                        <p className="text-gray-600 dark:text-gray-300 mt-1">{item.reason}</p>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>

      {/* –ú–∏—Ñ—ã –∏ —Ñ–∞–∫—Ç—ã */}
      <motion.div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl p-6 shadow-lg 
        border border-transparent hover:border-green-200 dark:hover:border-green-500/30 transition-all duration-300">
        <button
          onClick={() => toggleSection('myths')}
          className="w-full text-left mb-4 flex items-center justify-between"
        >
          <h3 className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r 
            from-green-600 to-teal-600 dark:from-green-400 dark:to-teal-400">
            –ú–∏—Ñ—ã –∏ —Ñ–∞–∫—Ç—ã
          </h3>
          <span className="text-xl text-gray-800 dark:text-gray-200">
            {expandedSections.includes('myths') ? '‚ñº' : '‚ñ∂'}
          </span>
        </button>
        <AnimatePresence>
          {expandedSections.includes('myths') && (
            <motion.div
              variants={sectionVariants}
              initial="hidden"
              animate="visible"
              exit="hidden"
            >
              <div className="space-y-4">
                {guides.myths.map((item, index) => (
                  <motion.div
                    key={item.myth}
                    variants={itemVariants}
                    initial="hidden"
                    animate="visible"
                    transition={{ delay: index * 0.1 }}
                    className="bg-gradient-to-br from-green-50/50 to-teal-50/50 
                      dark:from-green-900/30 dark:to-teal-900/30 
                      rounded-lg p-4 border border-green-100/50 dark:border-green-500/20"
                  >
                    <div className="flex items-start">
                      <span className="text-2xl mr-3">{item.icon}</span>
                      <div>
                        <h4 className="font-semibold text-gray-800 dark:text-gray-100">–ú–∏—Ñ: {item.myth}</h4>
                        <p className="text-gray-600 dark:text-gray-300 mt-1">–§–∞–∫—Ç: {item.fact}</p>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    </div>
  )
} 